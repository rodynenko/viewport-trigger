var ViewportTrigger=function(){"use strict";var r="0px",e=0;function t(r,e){for(var t=0,n=r.length;t<n;){if(e(r[0],t,r))return t;t+=1}return-1}function n(r,e){for(var t=Object.getOwnPropertyNames(r),n=0,o=t.length;n<o;n+=1){var i=t[n];e(r[i],i)}}return function(){var o=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!window.IntersectionObserver)throw new Error("There is no native support for IntersectionObserver API in your browser. Please, use polyfill");var s={rootMargin:i.rootMargin||r,threshold:i.threshold||e},v=new IntersectionObserver(a,s),u={enter:[],leave:[]};function a(r){for(var e=0,t=r.length;e<t;e+=1){var n=r[e],o=n.intersectionRatio,i=n.target,s=i.classList;o>0?s.contains("in-viewport")?(s.remove("in-viewport"),c("leave",i)):(s.add("in-viewport"),c("enter",i)):s.contains("in-viewport")&&(s.remove("in-viewport"),c("leave",i))}}function c(r,e){var n=u[r],o=t(n,(function(r){return r.target===e}));o>-1&&n[o].trigger()}return{getObserver:function(){return v},observe:function(r){if(!r)throw new Error("Target element is not set for observe function");return v.observe(r),o},on:function(r,e,t){if(!Array.isArray(u[r]))throw new Error("viewportObserver: method `on` get not correct event type");return u[r].push({target:e,trigger:t}),o},off:function(r,e){if(!Array.isArray(u[r]))throw new Error("viewportObserver: method `off` get not correct event type");var n=t(u[r],(function(r){return r.target===e}));return n>-1&&u[r].splice(n,1),o},unobserve:function(r){if(!r)throw new Error("Target element is not set for unobserve function");v.unobserve(r),n(u,(function(e,n){var o=t(u[n],r);o>-1&&u[n].splice(o,1)}))},unobserveAll:function(){v.disconnect(),n(u,(function(r,e){u[e].length=0}))}}}}();
