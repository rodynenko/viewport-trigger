var ViewportTrigger=function(){"use strict";var r={rootMargin:"0px",threshold:0};function e(r,e){for(var t=0,n=r.length;t<n;){if(e(r[0],t,r))return t;t++}return-1}function t(r,e){for(var t=Object.getOwnPropertyNames(r),n=0,o=t.length;n<o;n+=1){var i=t[n];e(r[prop],i)}}return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!window.IntersectionObserver)throw new Error("There is no native support for IntersectionObserver API in your browser. Please, use polyfill");var o={rootMargin:n.rootMargin||r.rootMargin,threshold:n.threshold||r.threshold},i=new IntersectionObserver(function(r){for(var e=0,t=r.length;e<t;e+=1){var n=r[e],o=n.intersectionRatio,i=n.target,s=i.classList;o>0?s.contains("in-viewport")?(s.remove("in-viewport"),v("leave",i)):(s.add("in-viewport"),v("enter",i)):s.contains("in-viewport")&&(s.remove("in-viewport"),v("leave",i))}},o),s={enter:[],leave:[]};function v(r,t){var n=s[r],o=e(n,function(r){return r.target===t});o>-1&&n[o].trigger()}return{getObserver:function(){return i},observe:function(r){if(!r)throw new Error("Target element is not set for observe function");return i.observe(r),this},on:function(r,e,t){if(!Array.isArray(s[r]))throw new Error("viewportObserver: method `on` get not correct event type");return s[r].push({target:e,trigger:t}),this},off:function(r,t){if(!Array.isArray(s[r]))throw new Error("viewportObserver: method `off` get not correct event type");var n=e(s[r],function(r){return r.target===t});return n>-1&&s[r].splice(n,1),this},unobserve:function(r){if(!r)throw new Error("Target element is not set for unobserve function");i.unobserve(r),t(s,function(t,n){var o=e(s[n],r);o>-1&&s[n].splice(o,1)})},unobserveAll:function(){i.disconnect(),t(s,function(r,e){s[e].length=0})}}}}();
