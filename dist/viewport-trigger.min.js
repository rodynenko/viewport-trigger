var ViewportTrigger=function(){"use strict";var t="0px",n=0;function i(r,e){for(var t=0,n=r.length;t<n;){if(e(r[0],t,r))return t;t++}return-1}function v(r,e){for(var t=Object.getOwnPropertyNames(r),n=0,o=t.length;n<o;n+=1){var i=t[n];e(r[prop],i)}}return function(){var r=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};if(!window.IntersectionObserver)throw new Error("There is no native support for IntersectionObserver API in your browser. Please, use polyfill");var r={rootMargin:r.rootMargin||t,threshold:r.threshold||n},e=new IntersectionObserver(function(r){for(var e=0,t=r.length;e<t;e+=1){var n=r[e],o=n.intersectionRatio,i=n.target,n=i.classList;0<o?n.contains("in-viewport")?(n.remove("in-viewport"),s("leave",i)):(n.add("in-viewport"),s("enter",i)):n.contains("in-viewport")&&(n.remove("in-viewport"),s("leave",i))}},r),o={enter:[],leave:[]};function s(r,e){var t=o[r],r=i(t,function(r){return r.target===e});-1<r&&t[r].trigger()}return{getObserver:function(){return e},observe:function(r){if(!r)throw new Error("Target element is not set for observe function");return e.observe(r),this},on:function(r,e,t){if(!Array.isArray(o[r]))throw new Error("viewportObserver: method `on` get not correct event type");return o[r].push({target:e,trigger:t}),this},off:function(r,e){if(!Array.isArray(o[r]))throw new Error("viewportObserver: method `off` get not correct event type");var t=i(o[r],function(r){return r.target===e});return-1<t&&o[r].splice(t,1),this},unobserve:function(n){if(!n)throw new Error("Target element is not set for unobserve function");e.unobserve(n),v(o,function(r,e){var t=i(o[e],n);-1<t&&o[e].splice(t,1)})},unobserveAll:function(){e.disconnect(),v(o,function(r,e){o[e].length=0})}}}}();
